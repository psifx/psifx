name: create-tag-and-release

on:
  push:
    branches:
      - main

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      -
        name: checkout
        id: checkout
        uses: actions/checkout@v4
      -
        name: setup-python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      -
        name: install-packages
        id: install-packages
        run: |
          python -m pip install --upgrade pip setuptools wheel
      -
        name: get-current-version
        id: get-current-version
        run: |
          git fetch --tags
          CURRENT_VERSION=$(git describe --tags $(git rev-list --tags --max-count=1))
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      -
        name: get-latest-version
        id: get-latest-version
        run: |
          LATEST_VERSION=$(python setup.py --version)
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
      -
        name: has-changed-version
        id: has-changed-version
        env:
          CURRENT_VERSION: ${{ steps.get-current-version.outputs.CURRENT_VERSION }}
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.LATEST_VERSION }}
        run: |
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            HAS_CHANGED_VERSION=true
          else
            HAS_CHANGED_VERSION=false
          fi
          echo "HAS_CHANGED_VERSION=$HAS_CHANGED_VERSION" >> $GITHUB_OUTPUT
      -
        name: create-tag
        id: create-tag
        if: steps.has-changed-version.outputs.HAS_CHANGED_VERSION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.LATEST_VERSION }}
        run: |
          git tag $LATEST_VERSION
          git push origin --tags
      -
        name: create-release
        id: create-release
        if: steps.has-changed-version.outputs.HAS_CHANGED_VERSION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LATEST_VERSION: ${{ steps.get-latest-version.outputs.LATEST_VERSION }}
        run: |
          gh release create "$LATEST_VERSION" --generate-notes
